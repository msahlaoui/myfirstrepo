# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '2.2.401'
  - script: dotnet build ./SimplCommerce.sln
    displayName: 'dotnet build'
  - script: ./run-tests.sh
    displayName: 'run tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx' 

- job: macOS
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '2.2.401'
  - script: dotnet build ./SimplCommerce.sln
    displayName: 'dotnet build'
  - script: ./run-tests.sh
    displayName: 'run tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx' 

- job: Windows
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '2.2.401'
  - script: dotnet build ./SimplCommerce.sln
    displayName: 'dotnet build'
  - task: PowerShell@2
    inputs:
      filePath: .\run-tests.ps1
    displayName: 'run tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx' 

- job: LinuxRelease
  pool:
    vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:

    - task: UseDotNet@2 
      displayName: ".NET Core 3.1.x"
      inputs:
        version: '3.1.x'
        packageType: sdk
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Test"
      inputs:
        command: test
        projects: '**/*tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Publish"
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-r linux-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: "Upload Artifacts"
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'hanselminutes' 